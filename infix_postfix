#include<stdio.h>
#include<string.h>
int top=-1;
#define n 10
char s[n];
void push(char a)
{
    if(top>=n-1)
    {
        printf("stsck is overflow\n");
    }
    else
    {
        top=top+1;
        s[top]=a;
    }
}
char pop()
{
    int k;
    if(top<0)
    {
        printf("stack is underflow\n");
        
    }
    else
    {
        k=s[top];
        top=top-1;
    return k;
    }
}
int is_operator(char o)
{
    if(o=='%'||o=='*'||o=='/'||o=='+'||o=='-'||o=='^')
    {
        return 1;
    }
    else
    return 0;
}
int is_precedence(char p)
{
    if(p=='^'||p=='%')
    {
        return 3;
    }
    else
    if(p=='*'||p=='/')
    {
        return 2;
    }
    else
    if(p=='+'||p=='-')
    {
        return 1;
    }
    else
    {
    return 0;
    }
}
void infix_postfix(char infix[],char postfix[])
{
    char item,ch;
    int i=0,j=0;
    push('(');
    strcat(infix,")");
    item=infix[i];
    while(item!='\0')
    {
        if(item=='(')
        {
            push(item);
        }
        else
        if(isdigit(item)||isalpha(item))
        {
            postfix[j]=item;
            j=j+1;
        }
        else
        if(is_operator(item)==1)
        {
            ch=pop();
            while(is_operator(ch)==1 && is_precedence(ch)>=is_precedence(item))
            {
                postfix[j]=ch;
                j=j+1;
                ch=pop();
            }
            push(ch);
            push(item);
        }
        else
        if(item==')')
        {
            ch=pop();
            while(ch!='(')
            {
                postfix[j]=ch;
                j=j+1;
                ch=pop();
            }
        }
        else
        {
            printf("valid expression\n");
        }
        i=i+1;
        item=infix[i];
    }
    postfix[j]='\0';
}
void main()
{
    int infix[n],postfix[n];
    printf("enter infix expression\n");
    gets(infix);
    infix_postfix(infix,postfix);
    printf("infix expression is\n");
    puts(infix);
    printf("postfix is ");
    puts(postfix);
}
